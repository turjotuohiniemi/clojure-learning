3
3/2
0.1
(+ 0.1 0.1 0.1)
(+ 0.1 0.1 0.1 0.1)
(+ 0.1 0.1 0.1 0.1 0.1)
(+ 0.1 0.1 0.1 0.1 0.1 0.1)
(+ 0.1 0.1 0.1 0.1 0.1 0.1 0.1)
(+ 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1)
(* 0.1 8)
(* 0.1 2)
(* 0.1 3)
(* 0.1 4)
(* 0.1 5)
(* 0.1 6)
:heippa
:else
(get ["a" \b "c"] 1)
(get ["a" \b "c"] 2)
(get ["a" \b "c"] -1)
(get [] 0)
(get false 0)
(get false 1)
(+ 1 nil)
(conj [1 2] [3 4])
(def book {:title "The City and the City"
           :authors [{:name "China Miéville", :birth-year 1972}]})
(get book :title)
(:title book)
(:authors book)
(:name (:authors book))
(get (:authors book) :name)
(:0 (:authors book))
(get (:authors book) 0)
(:name (get (:authors book) 0))
(def a [])
(assoc a 0 'jee')
(assoc a 0 "jee")
(assoc a 10 "jee")
(assoc a 1 "jee")
(assoc a 0 "jee")
(assoc (assoc a 0 "jee") 1 "hei")
(def a {})
a
(assoc a :hoi "maailma")
a
(assoc (assoc a :hoi "maailma") :moi "vaan")
(:hoi (assoc (assoc a :hoi "maailma") :moi "vaan"))
find-doc assoc
(find-doc assoc)
(find-doc "assoc")
(find-doc "/assoc")
(find-doc "/with-bindings")
(find "/assoc")
(doc "assoc")
(doc "with-bindings")
(doc assoc)
(doc conj)
(def a {"avain" "sisältö"≈)
(def a {"avain" "sisältö"})
a
(:avain a)
("avain" a)
(get a "avain")
(assoc a :avain "contentti")
(:avain (assoc a :avain "contentti"))
(contains? a "avain")
(contains? a :avain)
(contains? (assoc a :avain "contentti") :avain)
(def a [1 2 3 4])
(seq a)
a
(first a)
(rest a)
(rest (seq a))
(def a {:toka 2 :eka 1 :kolmas 3})
(first a)
(first (seq a))
(cons heippa a)
(cons "heippa" a)
(cons {:neljas 4} a)
(:eka (cons {:neljas 4} a))
(:eka a)
(first [1 2 3])
(cons 0 (seq [1 2 3]))
(cons 0 ([1 2 3]))
(cons 0 [1 2 3])
(doc seq)
(seq "ahaa")
{:eka 1 :toka 2}
(seq {:eka 1 :toka 2})
(:eka (cons {:neljas 4} a))
(:eka (cons (seq {:neljas 4}) a))
(cons (seq {:neljas 4}) a)
a
(seq a)
(cons [:neljas 4] a)
(cons {:neljas 4} a)
(doc cons)
(defn munge [x]
  (+ x 42))
(map munge [1 2 3 4])
(defn my munge [x] (+ x 42))
(defn mymunge [x] (+ x 42))
(map mymunge [1 2 3 4])
(get (map mymunge [1 2 3 4]) 1)
(doc get)
(get (map mymunge [1 2 3 4]) 0)
(first (map mymunge [1 2 3 4]))
(defn element-lengths [collection]
  (map (fn [x] (count x)) collection))
(element-lengths ["foo" "bar" "" "quux"])  ;=> (3 3 0 4)
(element-lengths ["x" [:a :b :c] {:y 42}]) ;=> (1 3 1)
["eka" "toka"]
["eka", "toka"]
["eka" "toka"] ["p.o. kolmas"]
(concat ["eka" "toka"] ["p.o. kolmas"])
doc concat
(doc concat)
(apply + [1 2 3] )
(doc str)
(apply str [1 2 3])
(apply doc ["concat" "conj"])
(apply = [1 2 3])
(apply = [1 1 3])
(apply = [1 1 1])
(doc apply)
(source apply)
(doc cons)
(def a ["a"])
a
(def [a b] ["a"])
(def [a b] ["a", "b"])
(doc repeat)
(repeat 10 ".")
#{:eka :toka}
(seq #{:eka :toka})
(contains? ["a" "b" "c"] "b")
(contains? #{"a" "b" "c"} "b")
(doc contains?)
(contains? ["a" "b" "c"] 1)
(contains? ["a" "b" "c"] 3)
(contains? ["a" "b" "c"] 2)
(doc conj)
(conj nil "eka")
(conj #{} "eka")
(set  [1 2 3 "a" "a"])
(count (set  [1 2 3 "a" "a"]))
(count [1 2 3 "a" "a"])
(doc contains?)
(doc empty?)
(seq [])
(seq {})
(seq #{})
{}
{a => 1≠
}
{a=>1}
{:a 1}
(def mappi {:a 1})
:a mappi
(mappi :a)
(doc reduce)
(frequencies "AB")
(frequencies "PAIRS")
(frequencies "PAIRS S")
\q
quit
