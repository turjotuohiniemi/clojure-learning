(some first [[] [1 2] []]) 
(if []  "tosi on" "valhe")
(doc first9
(doc first)
(if (first [[]])  "tosi on" "valhe")
(if (first [[] [1 2]])  "tosi on" "valhe")
(first [[] [1 2]]
(first [[] [1 2]])
(some (first [[] [1 2]]))
(some first [[] [1 2] []]) 
(doc some)
(some first [[] [1 2] []]) 
(some first [[] "hei" [1 2] []]) 
(first [])
(defn my-some [pred a-seq]
  (first (map pred a-seq)))
(my-some first [[] "hei" [1 2] []]) 
(def aseq [[] "hei" [1 2] []])
(map first aseq)
(doc filter)
(filter () aseq9
(filter (fn [k] (first k)) aseq)
(first (filter (fn [k] (first k)) aseq))
(defn my-some [pred a-seq]
  (first (filter (fn [k] (pred k)) a-seq)))
(my-some nil? [1 nil 2])
(first (filter (fn [k] (nil? k)) [1 nil 2]))
(filter (fn [k] (nil? k)) [1 nil 2])
(doc filter)
(some nil? [1 nil 2])
(doc some)
(true 1)
(true? 1)
(doc true?)
(doc truthy?)
(doc truthy)
(even [])
(even? [])
(doc empty?)
(empty? "")
(empty? nil)
(empty? false)
(doc filter)
(empty? [nil])
(nil? [nil])
(first [nil])
(empty? nil)
(doc every?)
(doc sqrt)
(doc Math/sqrt)
(doc div)
(doc Math/div)
(doc div?)
(doc divisor)
(doc mod?)
(doc mod)
(seq [1])
'(1)
(typeof)
(doc cons)
(first [1 2 3])
(* (first [1 2 3]) (rest [1 2 3]))
(first [1 2 3 4])
(empty? (first [1 2 3 4]))
(empty? (seq(first [1 2 3 4])))
(empty? (seq 1))
(doc seq)
(doc first)
(rest [1 2])
(rest [1])
(empty? (rest [1]))
(empty? (rest [1 2]))
(empty? (first [1 2]))
(first [1])
(doc rest)
(empty? (first [1 2]))
(empty? (seq (first [1 2])))
(doc last)
(doc count)
(doc max)
(num nil)
(max nil)
(rest [1])
(max 1 (rest [1]))
(max [first 1] (rest [1]))
(max (first 1) (rest [1]))
